{"version":3,"sources":["utils.js","array-splice.js","tree.js","shady.js","innerHTML.js","element-mixin.js","patch.js","event-mixin.js","distributor.js","env.js"],"names":["isShadyRoot","obj","Boolean","__localName","matchesSelector","element","selector","matches","call","copyOwnProperty","name","source","target","let","pd","Object","getOwnPropertyDescriptor","defineProperty","extend","n","n$","getOwnPropertyNames","i","length","extendAll","sources","mixin","patchPrototype","proto","getPrototypeOf","hasOwnProperty","patchProto","create","__sourceProto","__patchProto","setPrototypeOf","newSplice","index","removed","addedCount","getNativeProperty","property","descriptors","HTMLElement","prototype","Element","Node","get","enqueue","callback","scheduled","utils.promish","then","flush","flushList","push","flushCount","shift","customElements","const","isFlushedMaxed","flushMax","Error","escapeReplace","c","escapeAttr","s","replace","escapeAttrRegExp","escapeData","escapeDataRegExp","makeSet","arr","set","getOuterHTML","node","parentNode","composed","nodeType","ELEMENT_NODE","attr","tagName","localName","attrs","attributes","value","voidElements","getInnerHTML","TEXT_NODE","data","plaintextParents","COMMENT_NODE","window","console","error","content","child","c$","childNodes","l","filterMutations","mutations","targetRootNode","getRootNode","filter","mutation","mutationInScope","addedNodes","nodes","Array","from","configurable","patchNode","utils.settings","inUse","isNodePatched","patchImpl","canPatchNode","tree","saveChildNodes","patch","unpatchNode","unpatch","__patched","pathComposer","startNode","composedPath","current","startRoot","assignedSlot","DOCUMENT_FRAGMENT_NODE","host","document","retarget","refNode","path","utils.isShadyRoot","ancestor","lastRoot","root","rootIdx","refNodePath","p$","indexOf","mixinComposedFlag","Base","klazz","type","options","event","__composed","utils.mixin","fireHandlers","phase","hs","__handlers","fn","__immediatePropagationStopped","retargetNonBubblingEvent","e","__propagationStopped","Event","BUBBLING_PHASE","shadowRoot","shouldCapture","optionsOrCapture","capture","addEventListener","this","__eventListenerCount","wrappedFn","__target","__relatedTarget","relatedTarget","utils.patchPrototype","EventMixin","eventPhase","stopImmediatePropagation","__eventWrapper","nonBubblingEventsToRetarget","bubble","origAddEventListener","removeEventListener","wrapper","origRemoveEventListener","idx","splice","activateFocusEventOverrides","ev","settings","ShadyDOM","hasNativeShadowDOM","attachShadow","force","promish","p","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","common","Promise","resolve","cb","twiddle","createTextNode","observer","MutationObserver","disconnect","observe","characterData","EDIT_LEAVE","EDIT_UPDATE","EDIT_ADD","EDIT_DELETE","ArraySplice","calcEditDistances","currentStart","currentEnd","old","oldStart","oldEnd","rowCount","columnCount","distances","j","equals","north","west","spliceOperationsFromEditDistances","edits","min","northWest","reverse","calcSplices","prefixCount","suffixCount","minLength","Math","sharedPrefix","sharedSuffix","ops","undefined","splices","oldIndex","searchLength","index1","index2","count","calculateSplices","previous","currentValue","previousValue","nativeInsertBefore","insertBefore","nativeAppendChild","appendChild","nativeRemoveChild","removeChild","arrayCopyChildNodes","parent","copy","firstChild","nextSibling","arrayCopyChildren","firstElementChild","nextElementSibling","arrayCopy","a$","Logical","Composed","hasParentNode","saveComposedData","__dom","hasChildNodes","getChildNodes","_getChildNodes","getFirstChild","getNextSibling","getParentNode","getLastChild","lastChild","getPreviousSibling","previousSibling","getFirstElementChild","_getFirstElementChild","getLastElementChild","_getLastElementChild","getNextElementSibling","_getNextElementSibling","getPreviousElementSibling","_getPreviousElementSibling","utils.common","recordInsertBefore","container","ref_node","_linkNode","recordRemoveChild","$parentNode","$childNodes","$firstChild","$nextSibling","getComposedChildNodes","$lastChild","$previousSibling","lastElementChild","previousElementSibling","clearChildNodes","saveParentNode","newChild","refChild","_addChild","currentParent","_removeChild","isFrag","oldParent","NormalizedEvent","inType","params","createEvent","initEvent","bubbles","cancelable","Distributor","anonymous","insertionPointTag","getInsertionPoints","querySelectorAll","hasInsertionPoint","_insertionPoints","isInsertionPoint","distribute","distributePool","collectPool","pool","dirtyRoots","distributeInsertionPoint","shadyRoot","_assignedSlot","insertionPoint","prevAssignedNodes","_assignedNodes","clearAssignedSlots","needsSlotChange","anyDistributed","matchesInsertionPoint","__prevAssignedSlot","distributeNodeInto","children","setDistributedNodesOnInsertionPoint","_fireSlotChange","slot","savePrevious","slotName","getAttribute","trim","_distributedNodes","d$","dispatchEvent","isFinalDestination","ShadyRoot","frag","createDocumentFragment","__proto__","ShadyFragmentMixin","_init","ShadyMixin","_clean","_hasRendered","_distributor","update","distributionRoot","_findDistributionRoot","render","_elementNeedsDistribution","_skipUpdateInsertionPoints","updateInsertionPoints","compose","forceRender","i$","__insertionPoints","insertionPoints","_composeTree","_updateChildNodes","_composeNode","distributedNodes","distributedNode","d","next","getInsertionPointTag","DocumentFragment","utils.extend","list","mixinImpl","addNode","ownerRoot","ownerShadyRootForNode","__noInsertionPoint","ipAdded","_maybeAddInsertionPoint","_addedNode","handled","_maybeDistribute","removeNode","distributed","logicalParent","maybeDistributeParent","_removeDistributedChildren","_removeOwnerShadyRoot","_removedNode","_scheduleObserver","addedNode","removedNode","removedNodes","schedule","removeNodeFromParent","_hasCachedOwnerRoot","__ownerShadyRoot","documentElement","contains","fragContent","querySelector","wrappedContent","hasContent","needsDist","_nodeNeedsDistribution","added","np","na","hostNeedsDist","ip$","_contains","dc$","assignedNodes","flatten","firstComposedNode","clearNode","maybeDistributeAttributeChange","query","matcher","halter","_queryElements","elements","_queryElement","result","activeElementForNode","active","activeElement","activeRoot","nativeCloneNode","cloneNode","nativeImportNode","Document","importNode","nativeSetAttribute","setAttribute","nativeRemoveAttribute","removeAttribute","NodeMixin","defineProperties","parentElement","FragmentMixin","replaceChild","utils.matchesSelector","deep","nc","externalNode","doc","ownerDocument","isArray","textContent","tc","cn","join","text","innerHTML","createElement","ElementMixin","activeElementDescriptor","ActiveElementMixin","UnderActiveElementMixin","_activeElement","Mixins","utils.extendAll","Fragment","AsyncObserver","_scheduled","callbacks","Set","this$1","takeRecords","forEach","observeChildren","add","_callback","_observer","_node","unobserveChildren","handle","delete","size","patchedCount","log","head","hasPrototypeDescriptors","warn","mixinForObject","mixinForNode","DOCUMENT_NODE","alwaysComposed","blur","focus","focusin","focusout","click","dblclick","mousedown","mouseenter","mouseleave","mousemove","mouseout","mouseover","mouseup","wheel","beforeinput","input","keydown","keyup","compositionstart","compositionupdate","compositionend","touchstart","touchend","touchmove","touchcancel","pointerover","pointerenter","pointerdown","pointermove","pointerup","pointercancel","pointerout","pointerleave","gotpointercapture","lostpointercapture","dragstart","drag","dragenter","dragleave","dragover","drop","dragend","DOMActivate","DOMFocusIn","DOMFocusOut","keypress","isTrusted","__composedPath","currentTarget","__relatedTargetComposedPath","stopPropagation","PatchedEvent","PatchedCustomEvent","CustomEvent","PatchedMouseEvent","MouseEvent","patch.patchNode","isPatched","patch.isNodePatched","patch.unpatchNode","createRootAndEnsurePatched","events.addEventListener","events.removeEventListener","events.PatchedEvent","events.PatchedCustomEvent","events.PatchedMouseEvent","events.activateFocusEventOverrides"],"mappings":"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","file":"shadydom.min.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nexport let settings = window.ShadyDOM || {};\n\nsettings.hasNativeShadowDOM = Boolean(Element.prototype.attachShadow && Node.prototype.getRootNode);\n\nsettings.inUse = settings.force || !settings.hasNativeShadowDOM;\n\nexport function isShadyRoot(obj) {\n  return Boolean(obj.__localName === 'ShadyRoot');\n}\n\nlet p = Element.prototype;\nlet matches = p.matches || p.matchesSelector ||\n  p.mozMatchesSelector || p.msMatchesSelector ||\n  p.oMatchesSelector || p.webkitMatchesSelector;\n\nexport function matchesSelector(element, selector) {\n  return matches.call(element, selector);\n}\n\nfunction copyOwnProperty(name, source, target) {\n  let pd = Object.getOwnPropertyDescriptor(source, name);\n  if (pd) {\n    Object.defineProperty(target, name, pd);\n  }\n}\n\nexport function extend(target, source) {\n  if (target && source) {\n    let n$ = Object.getOwnPropertyNames(source);\n    for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n      copyOwnProperty(n, source, target);\n    }\n  }\n  return target || source;\n}\n\nexport function extendAll(target, ...sources) {\n  for (let i=0; i < sources.length; i++) {\n    extend(target, sources[i]);\n  }\n  return target;\n}\n\nexport function mixin(target, source) {\n  for (var i in source) {\n    target[i] = source[i];\n  }\n  return target;\n}\n\nexport function patchPrototype(obj, mixin) {\n  let proto = Object.getPrototypeOf(obj);\n  if (!proto.hasOwnProperty('__patchProto')) {\n    let patchProto = Object.create(proto);\n    patchProto.__sourceProto = proto;\n    extend(patchProto, mixin);\n    proto.__patchProto = patchProto;\n  }\n  Object.setPrototypeOf(obj, proto.__patchProto);\n}\n\nexport function unpatchPrototype(obj) {\n  if (obj.__sourceProto) {\n    Object.setPrototypeOf(obj, obj.__sourceProto);\n  }\n}\n\nexport let common = {};\n\n// TODO(sorvell): actually rely on a real Promise polyfill...\nexport let promish;\nif (window.Promise) {\n  promish = Promise.resolve();\n} else {\n  promish = {\n    then: function(cb) {\n      let twiddle = document.createTextNode('');\n      let observer = new MutationObserver(function() {\n        observer.disconnect();\n        cb();\n      });\n      observer.observe(twiddle, {characterData: true});\n    }\n  }\n}","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\nlet ArraySplice = {\n\n  // Note: This function is *based* on the computation of the Levenshtein\n  // \"edit\" distance. The one change is that \"updates\" are treated as two\n  // edits - not one. With Array splices, an update is really a delete\n  // followed by an add. By retaining this, we optimize for \"keeping\" the\n  // maximum array items in the original array. For example:\n  //\n  //   'xxxx123' -> '123yyyy'\n  //\n  // With 1-edit updates, the shortest path would be just to update all seven\n  // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n  // leaves the substring '123' intact.\n  calcEditDistances(current, currentStart, currentEnd,\n                              old, oldStart, oldEnd) {\n    // \"Deletion\" columns\n    let rowCount = oldEnd - oldStart + 1;\n    let columnCount = currentEnd - currentStart + 1;\n    let distances = new Array(rowCount);\n\n    // \"Addition\" rows. Initialize null column.\n    for (let i = 0; i < rowCount; i++) {\n      distances[i] = new Array(columnCount);\n      distances[i][0] = i;\n    }\n\n    // Initialize null row\n    for (let j = 0; j < columnCount; j++)\n      distances[0][j] = j;\n\n    for (let i = 1; i < rowCount; i++) {\n      for (let j = 1; j < columnCount; j++) {\n        if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n          distances[i][j] = distances[i - 1][j - 1];\n        else {\n          let north = distances[i - 1][j] + 1;\n          let west = distances[i][j - 1] + 1;\n          distances[i][j] = north < west ? north : west;\n        }\n      }\n    }\n\n    return distances;\n  },\n\n  // This starts at the final weight, and walks \"backward\" by finding\n  // the minimum previous weight recursively until the origin of the weight\n  // matrix.\n  spliceOperationsFromEditDistances(distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    let edits = [];\n    while (i > 0 || j > 0) {\n      if (i == 0) {\n        edits.push(EDIT_ADD);\n        j--;\n        continue;\n      }\n      if (j == 0) {\n        edits.push(EDIT_DELETE);\n        i--;\n        continue;\n      }\n      let northWest = distances[i - 1][j - 1];\n      let west = distances[i - 1][j];\n      let north = distances[i][j - 1];\n\n      let min;\n      if (west < north)\n        min = west < northWest ? west : northWest;\n      else\n        min = north < northWest ? north : northWest;\n\n      if (min == northWest) {\n        if (northWest == current) {\n          edits.push(EDIT_LEAVE);\n        } else {\n          edits.push(EDIT_UPDATE);\n          current = northWest;\n        }\n        i--;\n        j--;\n      } else if (min == west) {\n        edits.push(EDIT_DELETE);\n        i--;\n        current = west;\n      } else {\n        edits.push(EDIT_ADD);\n        j--;\n        current = north;\n      }\n    }\n\n    edits.reverse();\n    return edits;\n  },\n\n  /**\n   * Splice Projection functions:\n   *\n   * A splice map is a representation of how a previous array of items\n   * was transformed into a new array of items. Conceptually it is a list of\n   * tuples of\n   *\n   *   <index, removed, addedCount>\n   *\n   * which are kept in ascending index order of. The tuple represents that at\n   * the |index|, |removed| sequence of items were removed, and counting forward\n   * from |index|, |addedCount| items were added.\n   */\n\n  /**\n   * Lacking individual splice mutation information, the minimal set of\n   * splices can be synthesized given the previous state and final state of an\n   * array. The basic approach is to calculate the edit distance matrix and\n   * choose the shortest path through it.\n   *\n   * Complexity: O(l * p)\n   *   l: The length of the current array\n   *   p: The length of the old array\n   */\n  calcSplices(current, currentStart, currentEnd,\n                        old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n    let splice;\n\n    let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart == 0 && oldStart == 0)\n      prefixCount = this.sharedPrefix(current, old, minLength);\n\n    if (currentEnd == current.length && oldEnd == old.length)\n      suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);\n\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n\n    if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n      return [];\n\n    if (currentStart == currentEnd) {\n      splice = newSplice(currentStart, [], 0);\n      while (oldStart < oldEnd)\n        splice.removed.push(old[oldStart++]);\n\n      return [ splice ];\n    } else if (oldStart == oldEnd)\n      return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n    let ops = this.spliceOperationsFromEditDistances(\n        this.calcEditDistances(current, currentStart, currentEnd,\n                               old, oldStart, oldEnd));\n\n    splice = undefined;\n    let splices = [];\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; i++) {\n      switch(ops[i]) {\n        case EDIT_LEAVE:\n          if (splice) {\n            splices.push(splice);\n            splice = undefined;\n          }\n\n          index++;\n          oldIndex++;\n          break;\n        case EDIT_UPDATE:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n        case EDIT_ADD:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n          break;\n        case EDIT_DELETE:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n      }\n    }\n\n    if (splice) {\n      splices.push(splice);\n    }\n    return splices;\n  },\n\n  sharedPrefix(current, old, searchLength) {\n    for (let i = 0; i < searchLength; i++)\n      if (!this.equals(current[i], old[i]))\n        return i;\n    return searchLength;\n  },\n\n  sharedSuffix(current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && this.equals(current[--index1], old[--index2]))\n      count++;\n\n    return count;\n  },\n\n  calculateSplices(current, previous) {\n    return this.calcSplices(current, 0, current.length, previous, 0,\n                            previous.length);\n  },\n\n  equals(currentValue, previousValue) {\n    return currentValue === previousValue;\n  }\n\n};\n\nexport let calculateSplices = (current, previous) =>\n  ArraySplice.calculateSplices(current, previous);\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n// TODO(sorvell): circular (patch loads tree and tree loads patch)\n// for now this is stuck on `utils`\n//import {patchNode} from './patch'\nimport * as utils from './utils'\n\n// native add/remove\nlet nativeInsertBefore = Element.prototype.insertBefore;\nlet nativeAppendChild = Element.prototype.appendChild;\nlet nativeRemoveChild = Element.prototype.removeChild;\n\n/**\n * `tree` is a dom manipulation library used by ShadyDom to\n * manipulate composed and logical trees.\n */\nexport let tree = {\n\n  // sad but faster than slice...\n  arrayCopyChildNodes(parent) {\n    let copy=[], i=0;\n    for (let n=parent.firstChild; n; n=n.nextSibling) {\n      copy[i++] = n;\n    }\n    return copy;\n  },\n\n  arrayCopyChildren(parent) {\n    let copy=[], i=0;\n    for (let n=parent.firstElementChild; n; n=n.nextElementSibling) {\n      copy[i++] = n;\n    }\n    return copy;\n  },\n\n  arrayCopy(a$) {\n    let l = a$.length;\n    let copy = new Array(l);\n    for (let i=0; i < l; i++) {\n      copy[i] = a$[i];\n    }\n    return copy;\n  },\n\n  saveChildNodes(node) {\n    tree.Logical.saveChildNodes(node);\n    if (!tree.Composed.hasParentNode(node)) {\n      tree.Composed.saveComposedData(node);\n      //tree.Composed.saveParentNode(node);\n    }\n    tree.Composed.saveChildNodes(node);\n  }\n\n};\n\ntree.Logical = {\n\n  hasParentNode(node) {\n    return Boolean(node.__dom && node.__dom.parentNode);\n  },\n\n  hasChildNodes(node) {\n    return Boolean(node.__dom && node.__dom.childNodes !== undefined);\n  },\n\n  getChildNodes(node) {\n    // note: we're distinguishing here between undefined and false-y:\n    // hasChildNodes uses undefined check to see if this element has logical\n    // children; the false-y check indicates whether or not we should rebuild\n    // the cached childNodes array.\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\n      tree.Composed.getChildNodes(node);\n  },\n\n  _getChildNodes(node) {\n    if (!node.__dom.childNodes) {\n      node.__dom.childNodes = [];\n      for (let n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\n        node.__dom.childNodes.push(n);\n      }\n    }\n    return node.__dom.childNodes;\n  },\n\n  // NOTE: __dom can be created under 2 conditions: (1) an element has a\n  // logical tree, or (2) an element is in a logical tree. In case (1), the\n  // element will store firstChild/lastChild, and in case (2), the element\n  // will store parentNode, nextSibling, previousSibling. This means that\n  // the mere existence of __dom is not enough to know if the requested\n  // logical data is available and instead we do an explicit undefined check.\n  getParentNode(node) {\n    return node.__dom && node.__dom.parentNode !== undefined ?\n      node.__dom.parentNode : tree.Composed.getParentNode(node);\n  },\n\n  getFirstChild(node) {\n    return node.__dom && node.__dom.firstChild !== undefined ?\n      node.__dom.firstChild : tree.Composed.getFirstChild(node);\n  },\n\n  getLastChild(node) {\n    return node.__dom && node.__dom.lastChild  !== undefined ?\n      node.__dom.lastChild : tree.Composed.getLastChild(node);\n  },\n\n  getNextSibling(node) {\n    return node.__dom && node.__dom.nextSibling  !== undefined ?\n      node.__dom.nextSibling : tree.Composed.getNextSibling(node);\n  },\n\n  getPreviousSibling(node) {\n    return node.__dom && node.__dom.previousSibling  !== undefined ?\n      node.__dom.previousSibling : tree.Composed.getPreviousSibling(node);\n  },\n\n  getFirstElementChild(node) {\n    return node.__dom && node.__dom.firstChild !== undefined ?\n      this._getFirstElementChild(node) :\n      tree.Composed.getFirstElementChild(node);\n  },\n\n  _getFirstElementChild(node) {\n    let n = node.__dom.firstChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.nextSibling;\n    }\n    return n;\n  },\n\n  getLastElementChild(node) {\n    return node.__dom && node.__dom.lastChild !== undefined ?\n      this._getLastElementChild(node) :\n      tree.Composed.getLastElementChild(node);\n  },\n\n  _getLastElementChild(node) {\n    let n = node.__dom.lastChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.previousSibling;\n    }\n    return n;\n  },\n\n  getNextElementSibling(node) {\n    return node.__dom && node.__dom.nextSibling !== undefined ?\n      this._getNextElementSibling(node) :\n      tree.Composed.getNextElementSibling(node);\n  },\n\n  _getNextElementSibling(node) {\n    let n = node.__dom.nextSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this.getNextSibling(n);\n    }\n    return n;\n  },\n\n  getPreviousElementSibling(node) {\n    return node.__dom && node.__dom.previousSibling !== undefined ?\n      this._getPreviousElementSibling(node) :\n      tree.Composed.getPreviousElementSibling(node);\n  },\n\n  _getPreviousElementSibling(node) {\n    let n = node.__dom.previousSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this.getPreviousSibling(n);\n    }\n    return n;\n  },\n\n  // Capture the list of light children. It's important to do this before we\n  // start transforming the DOM into \"rendered\" state.\n  // Children may be added to this list dynamically. It will be treated as the\n  // source of truth for the light children of the element. This element's\n  // actual children will be treated as the rendered state once this function\n  // has been called.\n  saveChildNodes(node) {\n    if (!this.hasChildNodes(node)) {\n      node.__dom = node.__dom || {};\n      node.__dom.firstChild = node.firstChild;\n      node.__dom.lastChild = node.lastChild;\n      let c$ = node.__dom.childNodes = tree.arrayCopyChildNodes(node);\n      for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n        n.__dom = n.__dom || {};\n        n.__dom.parentNode = node;\n        n.__dom.nextSibling = c$[i+1] || null;\n        n.__dom.previousSibling = c$[i-1] || null;\n        utils.common.patchNode(n);\n      }\n    }\n  },\n\n  // TODO(sorvell): may need to patch saveChildNodes iff the tree has\n  // already been distributed.\n  // NOTE: ensure `node` is patched...\n  recordInsertBefore(node, container, ref_node) {\n    container.__dom.childNodes = null;\n    // handle document fragments\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      let c$ = tree.arrayCopyChildNodes(node);\n      for (let i=0; i < c$.length; i++) {\n        this._linkNode(c$[i], container, ref_node);\n      }\n      // cleanup logical dom in doc fragment.\n      node.__dom = node.__dom || {};\n      node.__dom.firstChild = node.__dom.lastChild = null;\n      node.__dom.childNodes = null;\n    } else {\n      this._linkNode(node, container, ref_node);\n    }\n  },\n\n  _linkNode(node, container, ref_node) {\n    utils.common.patchNode(node);\n    ref_node = ref_node || null;\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (ref_node) {\n      ref_node.__dom = ref_node.__dom || {};\n    }\n    // update ref_node.previousSibling <-> node\n    node.__dom.previousSibling = ref_node ? ref_node.__dom.previousSibling :\n      container.__dom.lastChild;\n    if (node.__dom.previousSibling) {\n      node.__dom.previousSibling.__dom.nextSibling = node;\n    }\n    // update node <-> ref_node\n    node.__dom.nextSibling = ref_node;\n    if (node.__dom.nextSibling) {\n      node.__dom.nextSibling.__dom.previousSibling = node;\n    }\n    // update node <-> container\n    node.__dom.parentNode = container;\n    if (ref_node) {\n      if (ref_node === container.__dom.firstChild) {\n        container.__dom.firstChild = node;\n      }\n    } else {\n      container.__dom.lastChild = node;\n      if (!container.__dom.firstChild) {\n        container.__dom.firstChild = node;\n      }\n    }\n    // remove caching of childNodes\n    container.__dom.childNodes = null;\n  },\n\n  recordRemoveChild(node, container) {\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (node === container.__dom.firstChild) {\n      container.__dom.firstChild = node.__dom.nextSibling;\n    }\n    if (node === container.__dom.lastChild) {\n      container.__dom.lastChild = node.__dom.previousSibling;\n    }\n    let p = node.__dom.previousSibling;\n    let n = node.__dom.nextSibling;\n    if (p) {\n      p.__dom = p.__dom || {};\n      p.__dom.nextSibling = n;\n    }\n    if (n) {\n      n.__dom = n.__dom || {};\n      n.__dom.previousSibling = p;\n    }\n    // When an element is removed, logical data is no longer tracked.\n    // Explicitly set `undefined` here to indicate this. This is disginguished\n    // from `null` which is set if info is null.\n    node.__dom.parentNode = node.__dom.previousSibling =\n      node.__dom.nextSibling = null;\n    // remove caching of childNodes\n    container.__dom.childNodes = null;\n  }\n\n}\n\n\n// TODO(sorvell): composed tree manipulation is made available\n// (1) to maninpulate the composed tree, and (2) to track changes\n// to the tree for optional patching pluggability.\ntree.Composed = {\n\n  hasParentNode(node) {\n    return Boolean(node.__dom && node.__dom.$parentNode !== undefined);\n  },\n\n  hasChildNodes(node) {\n    return Boolean(node.__dom && node.__dom.$childNodes !== undefined);\n  },\n\n  getChildNodes(node) {\n    return this.hasChildNodes(node) ? this._getChildNodes(node) :\n      (!node.__patched && tree.arrayCopy(node.childNodes));\n  },\n\n  _getChildNodes(node) {\n    if (!node.__dom.$childNodes) {\n      node.__dom.$childNodes = [];\n      for (let n=node.__dom.$firstChild; n; n=n.__dom.$nextSibling) {\n        node.__dom.$childNodes.push(n);\n      }\n    }\n    return node.__dom.$childNodes;\n  },\n\n  getComposedChildNodes(node) {\n    return node.__dom.$childNodes;\n  },\n\n  getParentNode(node) {\n    return this.hasParentNode(node) ? node.__dom.$parentNode :\n      (!node.__patched && node.parentNode);\n  },\n\n  getFirstChild(node) {\n    return node.__patched ? node.__dom.$firstChild : node.firstChild;\n  },\n\n  getLastChild(node) {\n    return node.__patched ? node.__dom.$lastChild : node.lastChild;\n  },\n\n  getNextSibling(node) {\n    return node.__patched ? node.__dom.$nextSibling : node.nextSibling;\n  },\n\n  getPreviousSibling(node) {\n    return node.__patched ? node.__dom.$previousSibling : node.previousSibling;\n  },\n\n  getFirstElementChild(node) {\n    return node.__patched ? this._getFirstElementChild(node) :\n      node.firstElementChild;\n  },\n\n  _getFirstElementChild(node) {\n    let n = node.__dom.$firstChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.$nextSibling;\n    }\n    return n;\n  },\n\n  getLastElementChild(node) {\n    return node.__patched ? this._getLastElementChild(node) :\n      node.lastElementChild;\n  },\n\n  _getLastElementChild(node) {\n    let n = node.__dom.$lastChild;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = n.__dom.$previousSibling;\n    }\n    return n;\n  },\n\n  getNextElementSibling(node) {\n    return node.__patched ? this._getNextElementSibling(node) :\n      node.nextElementSibling;\n  },\n\n  _getNextElementSibling(node) {\n    let n = node.__dom.$nextSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this.getNextSibling(n);\n    }\n    return n;\n  },\n\n  getPreviousElementSibling(node) {\n    return node.__patched ? this._getPreviousElementSibling(node) :\n      node.previousElementSibling;\n  },\n\n  _getPreviousElementSibling(node) {\n    let n = node.__dom.$previousSibling;\n    while (n && n.nodeType !== Node.ELEMENT_NODE) {\n      n = this.getPreviousSibling(n);\n    }\n    return n;\n  },\n\n  saveChildNodes(node) {\n    if (!this.hasChildNodes(node)) {\n      node.__dom = node.__dom || {};\n      node.__dom.$firstChild = node.firstChild;\n      node.__dom.$lastChild = node.lastChild;\n      let c$ = node.__dom.$childNodes = tree.arrayCopyChildNodes(node);\n      for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n        this.saveComposedData(n);\n      }\n    }\n  },\n\n  saveComposedData(node) {\n    node.__dom = node.__dom || {};\n    if (node.__dom.$parentNode === undefined) {\n      node.__dom.$parentNode = node.parentNode;\n    }\n    if (node.__dom.$nextSibling === undefined) {\n      node.__dom.$nextSibling = node.nextSibling;\n    }\n    if (node.__dom.$previousSibling === undefined) {\n      node.__dom.$previousSibling = node.previousSibling;\n    }\n  },\n\n  recordInsertBefore(node, container, ref_node) {\n    container.__dom.$childNodes = null;\n    // handle document fragments\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      // TODO(sorvell): remember this for patching:\n      // the act of setting this info can affect patched nodes\n      // getters; therefore capture childNodes before patching.\n      for (let n=this.getFirstChild(node); n; n=this.getNextSibling(n)) {\n        this._linkNode(n, container, ref_node);\n      }\n    } else {\n      this._linkNode(node, container, ref_node);\n    }\n  },\n\n  _linkNode(node, container, ref_node) {\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (ref_node) {\n      ref_node.__dom = ref_node.__dom || {};\n    }\n    // update ref_node.previousSibling <-> node\n    node.__dom.$previousSibling = ref_node ? ref_node.__dom.$previousSibling :\n      container.__dom.$lastChild;\n    if (node.__dom.$previousSibling) {\n      node.__dom.$previousSibling.__dom.$nextSibling = node;\n    }\n    // update node <-> ref_node\n    node.__dom.$nextSibling = ref_node;\n    if (node.__dom.$nextSibling) {\n      node.__dom.$nextSibling.__dom.$previousSibling = node;\n    }\n    // update node <-> container\n    node.__dom.$parentNode = container;\n    if (ref_node) {\n      if (ref_node === container.__dom.$firstChild) {\n        container.__dom.$firstChild = node;\n      }\n    } else {\n      container.__dom.$lastChild = node;\n      if (!container.__dom.$firstChild) {\n        container.__dom.$firstChild = node;\n      }\n    }\n    // remove caching of childNodes\n    container.__dom.$childNodes = null;\n  },\n\n  recordRemoveChild(node, container) {\n    node.__dom = node.__dom || {};\n    container.__dom = container.__dom || {};\n    if (node === container.__dom.$firstChild) {\n      container.__dom.$firstChild = node.__dom.$nextSibling;\n    }\n    if (node === container.__dom.$lastChild) {\n      container.__dom.$lastChild = node.__dom.$previousSibling;\n    }\n    let p = node.__dom.$previousSibling;\n    let n = node.__dom.$nextSibling;\n    if (p) {\n      p.__dom = p.__dom || {};\n      p.__dom.$nextSibling = n;\n    }\n    if (n) {\n      n.__dom = n.__dom || {};\n      n.__dom.$previousSibling = p;\n    }\n    node.__dom.$parentNode = node.__dom.$previousSibling =\n      node.__dom.$nextSibling = null;\n    // remove caching of childNodes\n    container.__dom.$childNodes = null;\n  },\n\n  clearChildNodes(node) {\n    let c$ = this.getChildNodes(node);\n    for (let i=0, c; i < c$.length; i++) {\n      c = c$[i];\n      this.recordRemoveChild(c, node);\n      nativeRemoveChild.call(node, c)\n    }\n  },\n\n  saveParentNode(node) {\n    node.__dom = node.__dom || {};\n    node.__dom.$parentNode = node.parentNode;\n  },\n\n  insertBefore(parentNode, newChild, refChild) {\n    this.saveChildNodes(parentNode);\n    // remove from current location.\n    this._addChild(parentNode, newChild, refChild);\n    return nativeInsertBefore.call(parentNode, newChild, refChild || null);\n  },\n\n  appendChild(parentNode, newChild) {\n    this.saveChildNodes(parentNode);\n    this._addChild(parentNode, newChild);\n    return nativeAppendChild.call(parentNode, newChild);\n  },\n\n  removeChild(parentNode, node) {\n    let currentParent = this.getParentNode(node);\n    this.saveChildNodes(parentNode);\n    this._removeChild(parentNode, node);\n    if (currentParent === parentNode) {\n      return nativeRemoveChild.call(parentNode, node);\n    }\n  },\n\n  _addChild(parentNode, newChild, refChild) {\n    let isFrag = (newChild.nodeType === Node.DOCUMENT_FRAGMENT_NODE);\n    let oldParent = this.getParentNode(newChild);\n    if (oldParent) {\n      this._removeChild(oldParent, newChild);\n    }\n    if (isFrag) {\n      let c$ = this.getChildNodes(newChild);\n      for (let i=0; i < c$.length; i++) {\n        let c = c$[i];\n        // unlink document fragment children\n        this._removeChild(newChild, c);\n        this.recordInsertBefore(c, parentNode, refChild);\n      }\n    } else {\n      this.recordInsertBefore(newChild, parentNode, refChild);\n    }\n  },\n\n  _removeChild(parentNode, node) {\n    this.recordRemoveChild(node, parentNode);\n  }\n\n};\n\n// for testing...\nlet descriptors = {};\nexport function getNativeProperty(element, property) {\n  if (!descriptors[property]) {\n    descriptors[property] = Object.getOwnPropertyDescriptor(\n      HTMLElement.prototype, property) ||\n    Object.getOwnPropertyDescriptor(\n      Element.prototype, property) ||\n    Object.getOwnPropertyDescriptor(\n      Node.prototype, property);\n  }\n  return descriptors[property].get.call(element);\n}\n\n// for testing...\nfunction assertNative(element, property, tracked) {\n  let native = getNativeProperty(element, property);\n  if (native != tracked && element.__patched) {\n    window.console.warn('tracked', tracked, 'native', native);\n  }\n  return tracked;\n}","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {calculateSplices} from './array-splice'\nimport * as utils from './utils'\nimport {tree} from './tree'\nimport Distributor from './distributor'\n\n/**\n  Implements a pared down version of ShadowDOM's scoping, which is easy to\n  polyfill across browsers.\n*/\nexport class ShadyRoot {\n\n  constructor(host) {\n    if (!host) {\n      throw 'Must provide a host';\n    }\n    // NOTE: this strange construction is necessary because\n    // DocumentFragment cannot be subclassed on older browsers.\n    let frag = document.createDocumentFragment();\n    frag.__proto__ = ShadyFragmentMixin;\n    frag._init(host);\n    return frag;\n  }\n\n}\n\nlet ShadyMixin = {\n\n  _init(host) {\n    // NOTE: set a fake local name so this element can be\n    // distinguished from a DocumentFragment when patching.\n    // FF doesn't allow this to be `localName`\n    this.__localName = 'ShadyRoot';\n    // root <=> host\n    host.shadyRoot = this;\n    this.host = host;\n    // logical dom setup\n    tree.Logical.saveChildNodes(host);\n    tree.Logical.saveChildNodes(this);\n    // state flags\n    this._clean = true;\n    this._hasRendered = false;\n    this._distributor = new Distributor(this);\n    this.update();\n  },\n\n  // async render the \"top\" distributor (this is all that is needed to\n  // distribute this host).\n  update() {\n    let distributionRoot = this._findDistributionRoot(this.host);\n    //console.log('update from', this.host, 'root', distributionRoot.host, distributionRoot._clean);\n    if (distributionRoot._clean) {\n      distributionRoot._clean = false;\n      enqueue(function() {\n        distributionRoot.render();\n      });\n    }\n  },\n\n  // returns the host that's the top of this host's distribution tree\n  _findDistributionRoot(element) {\n    let root = element.shadyRoot;\n    while (element && this._elementNeedsDistribution(element)) {\n      root = element.getRootNode();\n      element = root && root.host;\n    }\n    return root;\n  },\n\n  // Return true if a host's children includes\n  // an insertion point that selects selectively\n  _elementNeedsDistribution(element) {\n    let c$ = tree.Logical.getChildNodes(element);\n    for (let i=0, c; i < c$.length; i++) {\n      c = c$[i];\n      if (this._distributor.isInsertionPoint(c)) {\n        return element.getRootNode();\n      }\n    }\n  },\n\n  render() {\n    if (!this._clean) {\n      if (!this._skipUpdateInsertionPoints) {\n        this.updateInsertionPoints();\n      } else if (!this._hasRendered) {\n        this._insertionPoints = [];\n      }\n      this._skipUpdateInsertionPoints = false;\n      // TODO(sorvell): previous ShadyDom had a fast path here\n      // that would avoid distribution for initial render if\n      // no insertion points exist. We cannot currently do this because\n      // it relies on elements being in the physical shadowRoot element\n      // so that native methods will be used. The current append code\n      // simply provokes distribution in this case and does not put the\n      // nodes in the shadowRoot. This could be done but we'll need to\n      // consider if the special processing is worth the perf gain.\n      // if (!this._hasRendered && !this._insertionPoints.length) {\n      //   tree.Composed.clearChildNodes(this.host);\n      //   tree.Composed.appendChild(this.host, this);\n      // } else {\n      // logical\n      this.distribute();\n      // physical\n      this.compose();\n      this._clean = true;\n      this._hasRendered = true;\n    }\n  },\n\n  forceRender() {\n    this._clean = false;\n    this.render();\n  },\n\n  distribute() {\n    let dirtyRoots = this._distributor.distribute();\n    for (let i=0; i<dirtyRoots.length; i++) {\n      dirtyRoots[i].forceRender();\n    }\n  },\n\n  updateInsertionPoints() {\n    let i$ = this.__insertionPoints;\n    // if any insertion points have been removed, clear their distribution info\n    if (i$) {\n      for (let i=0, c; i < i$.length; i++) {\n        c = i$[i];\n        if (c.getRootNode() !== this) {\n          this._distributor.clearAssignedSlots(c);\n        }\n      }\n    }\n    i$ = this._insertionPoints = this._distributor.getInsertionPoints();\n    // ensure insertionPoints's and their parents have logical dom info.\n    // save logical tree info\n    // a. for shadyRoot\n    // b. for insertion points (fallback)\n    // c. for parents of insertion points\n    for (let i=0, c; i < i$.length; i++) {\n      c = i$[i];\n      tree.Logical.saveChildNodes(c);\n      tree.Logical.saveChildNodes(tree.Logical.getParentNode(c));\n    }\n  },\n\n  get _insertionPoints() {\n    if (!this.__insertionPoints) {\n      this.updateInsertionPoints();\n    }\n    return this.__insertionPoints || (this.__insertionPoints = []);\n  },\n\n  set _insertionPoints(insertionPoints) {\n    this.__insertionPoints = insertionPoints;\n  },\n\n  hasInsertionPoint() {\n    return this._distributor.hasInsertionPoint();\n  },\n\n  compose() {\n    // compose self\n    // note: it's important to mark this clean before distribution\n    // so that attachment that provokes additional distribution (e.g.\n    // adding something to your parentNode) works\n    this._composeTree();\n    // TODO(sorvell): See fast paths here in Polymer v1\n    // (these seem unnecessary)\n  },\n\n  // Reify dom such that it is at its correct rendering position\n  // based on logical distribution.\n  _composeTree() {\n    this._updateChildNodes(this.host, this._composeNode(this.host));\n    let p$ = this._insertionPoints || [];\n    for (let i=0, l=p$.length, p, parent; (i<l) && (p=p$[i]); i++) {\n      parent = tree.Logical.getParentNode(p);\n      if ((parent !== this.host) && (parent !== this)) {\n        this._updateChildNodes(parent, this._composeNode(parent));\n      }\n    }\n  },\n\n  // Returns the list of nodes which should be rendered inside `node`.\n  _composeNode(node) {\n    let children = [];\n    let c$ = tree.Logical.getChildNodes(node.shadyRoot || node);\n    for (let i = 0; i < c$.length; i++) {\n      let child = c$[i];\n      if (this._distributor.isInsertionPoint(child)) {\n        let distributedNodes = child._distributedNodes ||\n          (child._distributedNodes = []);\n        for (let j = 0; j < distributedNodes.length; j++) {\n          let distributedNode = distributedNodes[j];\n          if (this.isFinalDestination(child, distributedNode)) {\n            children.push(distributedNode);\n          }\n        }\n      } else {\n        children.push(child);\n      }\n    }\n    return children;\n  },\n\n  isFinalDestination(insertionPoint, node) {\n    return this._distributor.isFinalDestination(\n      insertionPoint, node);\n  },\n\n  // Ensures that the rendered node list inside `container` is `children`.\n  _updateChildNodes(container, children) {\n    let composed = tree.Composed.getChildNodes(container);\n    let splices = calculateSplices(children, composed);\n    // process removals\n    for (let i=0, d=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        // check if the node is still where we expect it is before trying\n        // to remove it; this can happen if we move a node and\n        // then schedule its previous host for distribution resulting in\n        // the node being removed here.\n        if (tree.Composed.getParentNode(n) === container) {\n          tree.Composed.removeChild(container, n);\n        }\n        composed.splice(s.index + d, 1);\n      }\n      d -= s.addedCount;\n    }\n    // process adds\n    for (let i=0, s, next; (i<splices.length) && (s=splices[i]); i++) { //eslint-disable-line no-redeclare\n      next = composed[s.index];\n      for (let j=s.index, n; j < s.index + s.addedCount; j++) {\n        n = children[j];\n        tree.Composed.insertBefore(container, n, next);\n        // TODO(sorvell): is this splice strictly needed?\n        composed.splice(j, 0, n);\n      }\n    }\n  },\n\n  getInsertionPointTag() {\n    return this._distributor.insertionPointTag;\n  }\n\n}\n\nlet ShadyFragmentMixin = Object.create(DocumentFragment.prototype);\nutils.extend(ShadyFragmentMixin, ShadyMixin);\n\n// let needsUpgrade = window.CustomElements && !CustomElements.useNative;\n\n// function upgradeLogicalChildren(children) {\n//   if (needsUpgrade && children) {\n//     for (let i=0; i < children.length; i++) {\n//       CustomElements.upgrade(children[i]);\n//     }\n//   }\n// }\n\n// render enqueuer/flusher\nlet customElements = window.customElements;\nlet flushList = [];\nlet scheduled;\nlet flushCount = 0;\nlet flushMax = 100;\nexport function enqueue(callback) {\n  if (!scheduled) {\n    scheduled = true;\n    utils.promish.then(flush);\n  }\n  flushList.push(callback);\n}\n\nexport function flush() {\n  scheduled = false;\n  flushCount++;\n  while (flushList.length) {\n    flushList.shift()();\n  }\n  if (customElements && customElements.flush) {\n    customElements.flush();\n  }\n  // continue flushing after elements are upgraded...\n  const isFlushedMaxed = (flushCount > flushMax);\n  if (flushList.length && !isFlushedMaxed) {\n      flush();\n  }\n  flushCount = 0;\n  if (isFlushedMaxed) {\n    throw new Error('Loop detected in ShadyDOM distribution, aborting.')\n  }\n}\n\nflush.list = flushList;","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\n// Cribbed from ShadowDOM polyfill\n// https://github.com/webcomponents/webcomponentsjs/blob/master/src/ShadowDOM/wrappers/HTMLElement.js#L28\n/////////////////////////////////////////////////////////////////////////////\n// innerHTML and outerHTML\n\n// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#escapingString\nlet escapeAttrRegExp = /[&\\u00A0\"]/g;\nlet escapeDataRegExp = /[&\\u00A0<>]/g;\n\nfunction escapeReplace(c) {\n  switch (c) {\n    case '&':\n      return '&amp;';\n    case '<':\n      return '&lt;';\n    case '>':\n      return '&gt;';\n    case '\"':\n      return '&quot;';\n    case '\\u00A0':\n      return '&nbsp;';\n  }\n}\n\nfunction escapeAttr(s) {\n  return s.replace(escapeAttrRegExp, escapeReplace);\n}\n\nfunction escapeData(s) {\n  return s.replace(escapeDataRegExp, escapeReplace);\n}\n\nfunction makeSet(arr) {\n  let set = {};\n  for (let i = 0; i < arr.length; i++) {\n    set[arr[i]] = true;\n  }\n  return set;\n}\n\n// http://www.whatwg.org/specs/web-apps/current-work/#void-elements\nlet voidElements = makeSet([\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]);\n\nlet plaintextParents = makeSet([\n  'style',\n  'script',\n  'xmp',\n  'iframe',\n  'noembed',\n  'noframes',\n  'plaintext',\n  'noscript'\n]);\n\nexport function getOuterHTML(node, parentNode, composed) {\n  switch (node.nodeType) {\n    case Node.ELEMENT_NODE: {\n      let tagName = node.localName;\n      let s = '<' + tagName;\n      let attrs = node.attributes;\n      for (let i = 0, attr; (attr = attrs[i]); i++) {\n        s += ' ' + attr.name + '=\"' + escapeAttr(attr.value) + '\"';\n      }\n      s += '>';\n      if (voidElements[tagName]) {\n        return s;\n      }\n      return s + getInnerHTML(node, composed) + '</' + tagName + '>';\n    }\n    case Node.TEXT_NODE: {\n      let data = node.data;\n      if (parentNode && plaintextParents[parentNode.localName]) {\n        return data;\n      }\n      return escapeData(data);\n    }\n    case Node.COMMENT_NODE: {\n      return '<!--' + node.data + '-->';\n    }\n    default: {\n      window.console.error(node);\n      throw new Error('not implemented');\n    }\n  }\n}\n\nexport function getInnerHTML(node, composed) {\n  if (node.localName === 'template') {\n    node = node.content;\n  }\n  let s = '';\n  let c$ = composed ? composed(node) : node.childNodes;\n  for (let i=0, l=c$.length, child; (i<l) && (child=c$[i]); i++) {\n    s += getOuterHTML(child, node, composed);\n  }\n  return s;\n}","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport * as utils from './utils'\nimport {getInnerHTML} from './innerHTML'\nimport {tree} from './tree'\n\nlet mixinImpl = {\n\n  // Try to add node. Record logical info, track insertion points, perform\n  // distribution iff needed. Return true if the add is handled.\n  addNode(container, node, ref_node) {\n    let ownerRoot = this.ownerShadyRootForNode(container);\n    if (ownerRoot) {\n      // optimization: special insertion point tracking\n      if (node.__noInsertionPoint) {\n        ownerRoot._skipUpdateInsertionPoints = true;\n      }\n      // note: we always need to see if an insertion point is added\n      // since this saves logical tree info; however, invalidation state\n      // needs\n      let ipAdded = this._maybeAddInsertionPoint(node, container, ownerRoot);\n      // invalidate insertion points IFF not already invalid!\n      if (ipAdded) {\n        ownerRoot._skipUpdateInsertionPoints = false;\n      }\n      this._addedNode(node, ownerRoot);\n    }\n    if (tree.Logical.hasChildNodes(container)) {\n      tree.Logical.recordInsertBefore(node, container, ref_node);\n    }\n    // if not distributing and not adding to host, do a fast path addition\n    let handled = this._maybeDistribute(node, container, ownerRoot) ||\n      container.shadyRoot;\n    return handled;\n  },\n\n  // Try to remove node: update logical info and perform distribution iff\n  // needed. Return true if the removal has been handled.\n  // note that it's possible for both the node's host and its parent\n  // to require distribution... both cases are handled here.\n  removeNode(node) {\n    // important that we want to do this only if the node has a logical parent\n    let logicalParent = tree.Logical.hasParentNode(node) &&\n      tree.Logical.getParentNode(node);\n    let distributed;\n    let ownerRoot = this.ownerShadyRootForNode(node);\n    if (logicalParent) {\n      // distribute node's parent iff needed\n      distributed = this.maybeDistributeParent(node);\n      tree.Logical.recordRemoveChild(node, logicalParent);\n      // remove node from root and distribute it iff needed\n      if (ownerRoot && (this._removeDistributedChildren(ownerRoot, node) ||\n        logicalParent.localName === ownerRoot.getInsertionPointTag())) {\n        ownerRoot._skipUpdateInsertionPoints = false;\n        ownerRoot.update();\n      }\n    }\n    this._removeOwnerShadyRoot(node);\n    if (ownerRoot) {\n      this._removedNode(node, ownerRoot);\n    }\n    return distributed;\n  },\n\n\n  _scheduleObserver(node, addedNode, removedNode) {\n    let observer = node.__dom && node.__dom.observer;\n    if (observer) {\n      if (addedNode) {\n        observer.addedNodes.push(addedNode);\n      }\n      if (removedNode) {\n        observer.removedNodes.push(removedNode);\n      }\n      observer.schedule();\n    }\n  },\n\n  removeNodeFromParent(node, parent) {\n    if (parent) {\n      this._scheduleObserver(parent, null, node);\n      this.removeNode(node);\n    } else {\n      this._removeOwnerShadyRoot(node);\n    }\n  },\n\n  _hasCachedOwnerRoot(node) {\n    return Boolean(node.__ownerShadyRoot !== undefined);\n  },\n\n  getRootNode(node) {\n    if (!node || !node.nodeType) {\n      return;\n    }\n    let root = node.__ownerShadyRoot;\n    if (root === undefined) {\n      if (utils.isShadyRoot(node)) {\n        root = node;\n      } else {\n        let parent = tree.Logical.getParentNode(node);\n        root = parent ? this.getRootNode(parent) : node;\n      }\n      // memo-ize result for performance but only memo-ize\n      // result if node is in the document. This avoids a problem where a root\n      // can be cached while an element is inside a fragment.\n      // If this happens and we cache the result, the value can become stale\n      // because for perf we avoid processing the subtree of added fragments.\n      if (document.documentElement.contains(node)) {\n        node.__ownerShadyRoot = root;\n      }\n    }\n    return root;\n  },\n\n  ownerShadyRootForNode(node) {\n    let root = this.getRootNode(node);\n    if (utils.isShadyRoot(root)) {\n      return root;\n    }\n  },\n\n  _maybeDistribute(node, container, ownerRoot) {\n    // TODO(sorvell): technically we should check non-fragment nodes for\n    // <content> children but since this case is assumed to be exceedingly\n    // rare, we avoid the cost and will address with some specific api\n    // when the need arises.  For now, the user must call\n    // distributeContent(true), which updates insertion points manually\n    // and forces distribution.\n    let insertionPointTag = ownerRoot && ownerRoot.getInsertionPointTag() || '';\n    let fragContent = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) &&\n      !node.__noInsertionPoint &&\n      insertionPointTag && node.querySelector(insertionPointTag);\n    let wrappedContent = fragContent &&\n      (tree.Logical.getParentNode(fragContent).nodeType !==\n      Node.DOCUMENT_FRAGMENT_NODE);\n    let hasContent = fragContent || (node.localName === insertionPointTag);\n    // There are 3 possible cases where a distribution may need to occur:\n    // 1. <content> being inserted (the host of the shady root where\n    //    content is inserted needs distribution)\n    // 2. children being inserted into parent with a shady root (parent\n    //    needs distribution)\n    // 3. container is an insertionPoint\n    if (hasContent || (container.localName === insertionPointTag)) {\n      if (ownerRoot) {\n        // note, insertion point list update is handled after node\n        // mutations are complete\n        ownerRoot.update();\n      }\n    }\n    let needsDist = this._nodeNeedsDistribution(container);\n    if (needsDist) {\n      container.shadyRoot.update();\n    }\n    // Return true when distribution will fully handle the composition\n    // Note that if a content was being inserted that was wrapped by a node,\n    // and the parent does not need distribution, return false to allow\n    // the nodes to be added directly, after which children may be\n    // distributed and composed into the wrapping node(s)\n    return needsDist || (hasContent && !wrappedContent);\n  },\n\n  /* note: parent argument is required since node may have an out\n  of date parent at this point; returns true if a <content> is being added */\n  _maybeAddInsertionPoint(node, parent, root) {\n    let added;\n    let insertionPointTag = root.getInsertionPointTag();\n    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE &&\n      !node.__noInsertionPoint) {\n      let c$ = node.querySelectorAll(insertionPointTag);\n      for (let i=0, n, np, na; (i<c$.length) && (n=c$[i]); i++) {\n        np = tree.Logical.getParentNode(n);\n        // don't allow node's parent to be fragment itself\n        if (np === node) {\n          np = parent;\n        }\n        na = this._maybeAddInsertionPoint(n, np, root);\n        added = added || na;\n      }\n    } else if (node.localName === insertionPointTag) {\n      tree.Logical.saveChildNodes(parent);\n      tree.Logical.saveChildNodes(node);\n      added = true;\n    }\n    return added;\n  },\n\n  _nodeNeedsDistribution(node) {\n    return node && node.shadyRoot &&\n      node.shadyRoot.hasInsertionPoint();\n  },\n\n  // TODO(sorvell): needed for style scoping, use MO?\n  _addedNode() {},\n  _removedNode() {},\n  /*\n  _addedNode(node, root) {\n    // if (ShadyDOM.addedNode) {\n    //   ShadyDOM.addedNode(node, root);\n    // }\n  },\n\n  _removedNode(node, root) {\n    if (ShadyDOM.removedNode) {\n      ShadyDOM.removedNode(node, root);\n    }\n  },\n  */\n\n  _removeDistributedChildren(root, container) {\n    let hostNeedsDist;\n    let ip$ = root._insertionPoints;\n    for (let i=0; i<ip$.length; i++) {\n      let insertionPoint = ip$[i];\n      if (this._contains(container, insertionPoint)) {\n        let dc$ = insertionPoint.assignedNodes({flatten: true});\n        for (let j=0; j<dc$.length; j++) {\n          hostNeedsDist = true;\n          let node = dc$[j];\n          let parent = tree.Composed.getParentNode(node);\n          if (parent) {\n            tree.Composed.removeChild(parent, node);\n          }\n        }\n      }\n    }\n    return hostNeedsDist;\n  },\n\n  _contains(container, node) {\n    while (node) {\n      if (node == container) {\n        return true;\n      }\n      node = tree.Logical.getParentNode(node);\n    }\n  },\n\n  _removeOwnerShadyRoot(node) {\n    // optimization: only reset the tree if node is actually in a root\n    if (this._hasCachedOwnerRoot(node)) {\n      let c$ = tree.Logical.getChildNodes(node);\n      for (let i=0, l=c$.length, n; (i<l) && (n=c$[i]); i++) {\n        this._removeOwnerShadyRoot(n);\n      }\n    }\n    node.__ownerShadyRoot = undefined;\n  },\n\n  // TODO(sorvell): This will fail if distribution that affects this\n  // question is pending; this is expected to be exceedingly rare, but if\n  // the issue comes up, we can force a flush in this case.\n  firstComposedNode(insertionPoint) {\n    let n$ = insertionPoint.assignedNodes({flatten: true});\n    let root = this.getRootNode(insertionPoint);\n    for (let i=0, l=n$.length, n; (i<l) && (n=n$[i]); i++) {\n      // means that we're composed to this spot.\n      if (root.isFinalDestination(insertionPoint, n)) {\n        return n;\n      }\n    }\n  },\n\n  clearNode(node) {\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n  },\n\n  maybeDistributeParent(node) {\n    let parent = tree.Logical.getParentNode(node);\n    if (this._nodeNeedsDistribution(parent)) {\n      parent.shadyRoot.update();\n      return true;\n    }\n  },\n\n  maybeDistributeAttributeChange(node, name) {\n    let distribute = (node.localName === 'slot' && name === 'name');\n    if (distribute) {\n      let root = this.getRootNode(node);\n      if (root.update) {\n        root.update();\n      }\n    }\n  },\n\n  // NOTE: `query` is used primarily for ShadyDOM's querySelector impl,\n  // but it's also generally useful to recurse through the element tree\n  // and is used by Polymer's styling system.\n  query(node, matcher, halter) {\n    let list = [];\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\n      halter, list);\n    return list;\n  },\n\n  _queryElements(elements, matcher, halter, list) {\n    for (let i=0, l=elements.length, c; (i<l) && (c=elements[i]); i++) {\n      if (c.nodeType === Node.ELEMENT_NODE &&\n          this._queryElement(c, matcher, halter, list)) {\n        return true;\n      }\n    }\n  },\n\n  _queryElement(node, matcher, halter, list) {\n    let result = matcher(node);\n    if (result) {\n      list.push(node);\n    }\n    if (halter && halter(result)) {\n      return result;\n    }\n    this._queryElements(tree.Logical.getChildNodes(node), matcher,\n      halter, list);\n  },\n\n  activeElementForNode(node) {\n    let active = document.activeElement;\n    if (!active) {\n      return null;\n    }\n    let isShadyRoot = !!(utils.isShadyRoot(node));\n    if (node !== document) {\n      // If this node isn't a document or shady root, then it doesn't have\n      // an active element.\n      if (!isShadyRoot) {\n        return null;\n      }\n      // If this shady root's host is the active element or the active\n      // element is not a descendant of the host (in the composed tree),\n      // then it doesn't have an active element.\n      if (node.host === active ||\n          !node.host.contains(active)) {\n        return null;\n      }\n    }\n    // This node is either the document or a shady root of which the active\n    // element is a (composed) descendant of its host; iterate upwards to\n    // find the active element's most shallow host within it.\n    let activeRoot = this.ownerShadyRootForNode(active);\n    while (activeRoot && activeRoot !== node) {\n      active = activeRoot.host;\n      activeRoot = this.ownerShadyRootForNode(active);\n    }\n    if (node === document) {\n      // This node is the document, so activeRoot should be null.\n      return activeRoot ? null : active;\n    } else {\n      // This node is a non-document shady root, and it should be\n      // activeRoot.\n      return activeRoot === node ? active : null;\n    }\n  }\n\n};\n\nlet nativeCloneNode = Element.prototype.cloneNode;\nlet nativeImportNode = Document.prototype.importNode;\nlet nativeSetAttribute = Element.prototype.setAttribute;\nlet nativeRemoveAttribute = Element.prototype.removeAttribute;\n\nlet NodeMixin = {};\n\nObject.defineProperties(NodeMixin, {\n\n  parentElement: {\n    get() {\n      return tree.Logical.getParentNode(this);\n    },\n    configurable: true\n  },\n\n  parentNode: {\n    get() {\n      return tree.Logical.getParentNode(this);\n    },\n    configurable: true\n  },\n\n  nextSibling: {\n    get() {\n      return tree.Logical.getNextSibling(this);\n    },\n    configurable: true\n  },\n\n  previousSibling: {\n    get() {\n      return tree.Logical.getPreviousSibling(this);\n    },\n    configurable: true\n  },\n\n  nextElementSibling: {\n    get() {\n      return tree.Logical.getNextElementSibling(this);\n    },\n    configurable: true\n  },\n\n  previousElementSibling: {\n    get() {\n      return tree.Logical.getPreviousElementSibling(this);\n    },\n    configurable: true\n  },\n\n  assignedSlot: {\n    get() {\n      return this._assignedSlot;\n    },\n    configurable: true\n  }\n});\n\nlet FragmentMixin = {\n\n  appendChild(node) {\n    return this.insertBefore(node);\n  },\n\n  // cases in which we may not be able to just do standard native call\n  // 1. container has a shadyRoot (needsDistribution IFF the shadyRoot\n  // has an insertion point)\n  // 2. container is a shadyRoot (don't distribute, instead set\n  // container to container.host.\n  // 3. node is <content> (host of container needs distribution)\n  insertBefore(node, ref_node) {\n    if (ref_node && tree.Logical.getParentNode(ref_node) !== this) {\n      throw Error('The ref_node to be inserted before is not a child ' +\n        'of this node');\n    }\n    // remove node from its current position iff it's in a tree.\n    if (node.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n      let parent = tree.Logical.getParentNode(node);\n      mixinImpl.removeNodeFromParent(node, parent);\n    }\n    if (!mixinImpl.addNode(this, node, ref_node)) {\n      if (ref_node) {\n        // if ref_node is an insertion point replace with first distributed node\n        let root = mixinImpl.ownerShadyRootForNode(ref_node);\n        if (root) {\n          ref_node = ref_node.localName === root.getInsertionPointTag() ?\n            mixinImpl.firstComposedNode(ref_node) : ref_node;\n        }\n      }\n      // if adding to a shadyRoot, add to host instead\n      let container = utils.isShadyRoot(this) ?\n        this.host : this;\n      if (ref_node) {\n        tree.Composed.insertBefore(container, node, ref_node);\n      } else {\n        tree.Composed.appendChild(container, node);\n      }\n    }\n    mixinImpl._scheduleObserver(this, node);\n    return node;\n  },\n\n  /**\n    Removes the given `node` from the element's `lightChildren`.\n    This method also performs dom composition.\n  */\n  removeChild(node) {\n    if (tree.Logical.getParentNode(node) !== this) {\n      throw Error('The node to be removed is not a child of this node: ' +\n        node);\n    }\n    if (!mixinImpl.removeNode(node)) {\n      // if removing from a shadyRoot, remove form host instead\n      let container = utils.isShadyRoot(this) ?\n        this.host :\n        this;\n      // not guaranteed to physically be in container; e.g.\n      // undistributed nodes.\n      let parent = tree.Composed.getParentNode(node);\n      if (container === parent) {\n        tree.Composed.removeChild(container, node);\n      }\n    }\n    mixinImpl._scheduleObserver(this, null, node);\n    return node;\n  },\n\n  replaceChild(node, ref_node) {\n    this.insertBefore(node, ref_node);\n    this.removeChild(ref_node);\n    return node;\n  },\n\n  // TODO(sorvell): consider doing native QSA and filtering results.\n  querySelector(selector) {\n    // match selector and halt on first result.\n    let result = mixinImpl.query(this, function(n) {\n      return utils.matchesSelector(n, selector);\n    }, function(n) {\n      return Boolean(n);\n    })[0];\n    return result || null;\n  },\n\n  querySelectorAll(selector) {\n    return mixinImpl.query(this, function(n) {\n      return utils.matchesSelector(n, selector);\n    });\n  },\n\n  cloneNode(deep) {\n    if (this.localName == 'template') {\n      return nativeCloneNode.call(this, deep);\n    } else {\n      let n = nativeCloneNode.call(this, false);\n      if (deep) {\n        let c$ = this.childNodes;\n        for (let i=0, nc; i < c$.length; i++) {\n          nc = c$[i].cloneNode(true);\n          n.appendChild(nc);\n        }\n      }\n      return n;\n    }\n  },\n\n  importNode(externalNode, deep) {\n    // for convenience use this node's ownerDoc if the node isn't a document\n    let doc = this instanceof Document ? this :\n      this.ownerDocument;\n    let n = nativeImportNode.call(doc, externalNode, false);\n    if (deep) {\n      let c$ = tree.Logical.getChildNodes(externalNode);\n      utils.common.patchNode(n);\n      for (let i=0, nc; i < c$.length; i++) {\n        nc = doc.importNode(c$[i], true);\n        n.appendChild(nc);\n      }\n    }\n    return n;\n  }\n};\n\nObject.defineProperties(FragmentMixin, {\n\n  childNodes: {\n    get() {\n      let c$ = tree.Logical.getChildNodes(this);\n      return Array.isArray(c$) ? c$ : tree.arrayCopyChildNodes(this);\n    },\n    configurable: true\n  },\n\n  children: {\n    get() {\n      if (tree.Logical.hasChildNodes(this)) {\n        return Array.prototype.filter.call(this.childNodes, function(n) {\n          return (n.nodeType === Node.ELEMENT_NODE);\n        });\n      } else {\n        return tree.arrayCopyChildren(this);\n      }\n    },\n    configurable: true\n  },\n\n  firstChild: {\n    get() {\n      return tree.Logical.getFirstChild(this);\n    },\n    configurable: true\n  },\n\n  lastChild: {\n    get() {\n      return tree.Logical.getLastChild(this);\n    },\n    configurable: true\n  },\n\n  firstElementChild: {\n    get() {\n      return tree.Logical.getFirstElementChild(this);\n    },\n    configurable: true\n  },\n\n  lastElementChild: {\n    get() {\n      return tree.Logical.getLastElementChild(this);\n    },\n    configurable: true\n  },\n\n  // TODO(srovell): strictly speaking fragments do not have textContent\n  // or innerHTML but ShadowRoots do and are not easily distinguishable.\n  // textContent / innerHTML\n  textContent: {\n    get() {\n      if (this.childNodes) {\n        let tc = [];\n        for (let i = 0, cn = this.childNodes, c; (c = cn[i]); i++) {\n          if (c.nodeType !== Node.COMMENT_NODE) {\n            tc.push(c.textContent);\n          }\n        }\n        return tc.join('');\n      }\n      return '';\n    },\n    set(text) {\n      mixinImpl.clearNode(this);\n      if (text) {\n        this.appendChild(document.createTextNode(text));\n      }\n    },\n    configurable: true\n  },\n\n  innerHTML: {\n    get() {\n      return getInnerHTML(this);\n    },\n    set(text) {\n      mixinImpl.clearNode(this);\n      let d = document.createElement('div');\n      d.innerHTML = text;\n      // here, appendChild may move nodes async so we cannot rely\n      // on node position when copying\n      let c$ = tree.arrayCopyChildNodes(d);\n      for (let i=0; i < c$.length; i++) {\n        this.appendChild(c$[i]);\n      }\n    },\n    configurable: true\n  }\n\n});\n\nlet ElementMixin = {\n\n  // TODO(sorvell): should only exist on <slot>\n  assignedNodes(options) {\n    return (options && options.flatten ? this._distributedNodes :\n      this._assignedNodes) || [];\n  },\n\n\n  setAttribute(name, value) {\n    nativeSetAttribute.call(this, name, value);\n    if (!mixinImpl.maybeDistributeParent(this)) {\n      mixinImpl.maybeDistributeAttributeChange(this, name);\n    }\n  },\n\n  removeAttribute(name) {\n    nativeRemoveAttribute.call(this, name);\n    if (!mixinImpl.maybeDistributeParent(this)) {\n      mixinImpl.maybeDistributeAttributeChange(this, name);\n    }\n  }\n\n};\n\nObject.defineProperties(ElementMixin, {\n\n  shadowRoot: {\n    get() {\n      return this.shadyRoot;\n    }\n  },\n\n  slot: {\n    get() {\n      return this.getAttribute('slot');\n    },\n    set(value) {\n      this.setAttribute('slot', value);\n    }\n  }\n\n});\n\nlet activeElementDescriptor = {\n  get() {\n    return mixinImpl.activeElementForNode(this);\n  }\n}\n\nlet ActiveElementMixin = {};\nObject.defineProperties(ActiveElementMixin, {\n  activeElement: activeElementDescriptor\n});\n\nlet UnderActiveElementMixin = {};\nObject.defineProperties(UnderActiveElementMixin, {\n  _activeElement: activeElementDescriptor\n});\n\nexport let Mixins = {\n\n  Node: utils.extendAll({__patched: 'Node'}, NodeMixin),\n\n  Fragment: utils.extendAll({__patched: 'Fragment'},\n    NodeMixin, FragmentMixin, ActiveElementMixin),\n\n  Element: utils.extendAll({__patched: 'Element'},\n    NodeMixin, FragmentMixin, ElementMixin, ActiveElementMixin),\n\n  // Note: activeElement cannot be patched on document!\n  Document: utils.extendAll({__patched: 'Document'},\n    NodeMixin, FragmentMixin, ElementMixin, UnderActiveElementMixin)\n\n};\n\nexport let getRootNode = function(node) {\n  return mixinImpl.getRootNode(node);\n}\n\nexport function filterMutations(mutations, target) {\n  const targetRootNode = getRootNode(target);\n  return mutations.filter(function(mutation) {\n    const mutationInScope = (targetRootNode === getRootNode(mutation.target));\n    if (mutationInScope && mutation.addedNodes) {\n      let nodes = Array.from(mutation.addedNodes).filter(function(n) {\n        return (targetRootNode === getRootNode(n));\n      });\n      Object.defineProperty(mutation, 'addedNodes', {\n        value: nodes,\n        configurable: true\n      });\n    }\n    return mutationInScope &&\n      (!mutation.addedNodes || mutation.addedNodes.length);\n  });\n}\n\n// const promise = Promise.resolve();\n\nclass AsyncObserver {\n\n  constructor() {\n    this._scheduled = false;\n    this.addedNodes = [];\n    this.removedNodes = [];\n    this.callbacks = new Set();\n  }\n\n  schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      utils.promish.then(() => {\n        this.flush();\n      });\n    }\n  }\n\n  flush() {\n    if (this._scheduled) {\n      this._scheduled = false;\n      let mutations = this.takeRecords();\n      if (mutations.length) {\n        this.callbacks.forEach(function(cb) {\n          cb(mutations);\n        });\n      }\n    }\n  }\n\n  takeRecords() {\n    if (this.addedNodes.length || this.removedNodes.length) {\n      let mutations = [{\n        addedNodes: this.addedNodes,\n        removedNodes: this.removedNodes\n      }];\n      this.addedNodes = [];\n      this.removedNodes = [];\n      return mutations;\n    }\n    return [];\n  }\n\n}\n\n// TODO(sorvell): consider instead polyfilling MutationObserver\n// directly so that users do not have to fork their code.\n// Supporting the entire api may be challenging: e.g. filtering out\n// removed nodes in the wrong scope and seeing non-distributing\n// subtree child mutations.\nexport let observeChildren = function(node, callback) {\n  utils.common.patchNode(node);\n  if (!node.__dom.observer) {\n    node.__dom.observer = new AsyncObserver();\n  }\n  node.__dom.observer.callbacks.add(callback);\n  let observer = node.__dom.observer;\n  return {\n    _callback: callback,\n    _observer: observer,\n    _node: node,\n    takeRecords() {\n      return observer.takeRecords()\n    }\n  };\n}\n\nexport let unobserveChildren = function(handle) {\n  let observer = handle && handle._observer;\n  if (observer) {\n    observer.callbacks.delete(handle._callback);\n    if (!observer.callbacks.size) {\n      handle._node.__dom.observer = null;\n    }\n  }\n}","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Patches elements that interacts with ShadyDOM\n * such that tree traversal and mutation apis act like they would under\n * ShadowDOM.\n *\n * This import enables seemless interaction with ShadyDOM powered\n * custom elements, enabling better interoperation with 3rd party code,\n * libraries, and frameworks that use DOM tree manipulation apis.\n */\n\n'use strict';\nimport {tree} from './tree'\nimport * as utils from './utils'\nimport {Mixins} from './element-mixin'\n\nexport let patchedCount = 0;\n\nlet log = false;\n\nlet patchImpl = {\n\n  canPatchNode: function(node) {\n    switch (node) {\n      case document.head:\n      case document.documentElement:\n        return false;\n      default:\n        return true;\n    }\n  },\n\n  hasPrototypeDescriptors: Boolean(Object.getOwnPropertyDescriptor(\n    window.Node.prototype, 'textContent')),\n\n  patch: function(node) {\n    patchedCount++;\n    log && window.console.warn('patch node', node);\n    if (this.hasPrototypeDescriptors) {\n      utils.patchPrototype(node, this.mixinForObject(node));\n    } else {\n      window.console.warn('Patching instance rather than prototype', node);\n      utils.extend(node, this.mixinForNode(node));\n    }\n  },\n\n  mixinForObject: function(obj) {\n    switch (obj.nodeType) {\n      case Node.ELEMENT_NODE:\n        return Mixins.Element;\n      case Node.DOCUMENT_FRAGMENT_NODE:\n        return Mixins.Fragment;\n      case Node.DOCUMENT_NODE:\n        return Mixins.Document;\n      case Node.TEXT_NODE:\n      case Node.COMMENT_NODE:\n        return Mixins.Node;\n    }\n  },\n\n  unpatch: function(obj) {\n    if (obj.__sourceProto) {\n      obj.__proto__ = obj.__sourceProto;\n\n    }\n    // TODO(sorvell): implement unpatching for non-proto patchable browsers\n  }\n\n};\n\nexport function patchNode(node) {\n  if (!utils.settings.inUse) {\n    return;\n  }\n  if (!isNodePatched(node) && patchImpl.canPatchNode(node)) {\n    tree.saveChildNodes(node);\n    patchImpl.patch(node);\n  }\n}\n\nexport function unpatchNode(node) {\n  patchImpl.unpatch(node);\n}\n\nexport function isNodePatched(node) {\n  return Boolean(node.__patched);\n}\n\n// TODO(sorvell): fake export\nutils.common.patchNode = patchNode;\nutils.common.isNodePatched = isNodePatched;","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport * as utils from './utils'\n\nlet origAddEventListener = Element.prototype.addEventListener;\nlet origRemoveEventListener = Element.prototype.removeEventListener;\n\n// https://github.com/w3c/webcomponents/issues/513#issuecomment-224183937\nlet alwaysComposed = {\n  blur: true,\n  focus: true,\n  focusin: true,\n  focusout: true,\n  click: true,\n  dblclick: true,\n  mousedown: true,\n  mouseenter: true,\n  mouseleave: true,\n  mousemove: true,\n  mouseout: true,\n  mouseover: true,\n  mouseup: true,\n  wheel: true,\n  beforeinput: true,\n  input: true,\n  keydown: true,\n  keyup: true,\n  compositionstart: true,\n  compositionupdate: true,\n  compositionend: true,\n  touchstart: true,\n  touchend: true,\n  touchmove: true,\n  touchcancel: true,\n  pointerover: true,\n  pointerenter: true,\n  pointerdown: true,\n  pointermove: true,\n  pointerup: true,\n  pointercancel: true,\n  pointerout: true,\n  pointerleave: true,\n  gotpointercapture: true,\n  lostpointercapture: true,\n  dragstart: true,\n  drag: true,\n  dragenter: true,\n  dragleave: true,\n  dragover: true,\n  drop: true,\n  dragend: true,\n  DOMActivate: true,\n  DOMFocusIn: true,\n  DOMFocusOut: true,\n  keypress: true\n};\n\nfunction pathComposer(startNode, composed) {\n  let composedPath = [];\n  let current = startNode;\n  let startRoot = startNode === window ? window : startNode.getRootNode();\n  while (current) {\n    composedPath.push(current);\n    if (current.assignedSlot) {\n      current = current.assignedSlot;\n    } else if (current.nodeType === Node.DOCUMENT_FRAGMENT_NODE && current.host && (composed || current !== startRoot)) {\n      current = current.host;\n    } else {\n      current = current.parentNode;\n    }\n  }\n  // event composedPath includes window when startNode's ownerRoot is document\n  if (composedPath[composedPath.length - 1] === document) {\n    composedPath.push(window);\n  }\n  return composedPath;\n}\n\nfunction retarget(refNode, path) {\n  if (!utils.isShadyRoot) {\n    return refNode;\n  }\n  // If ANCESTOR's root is not a shadow root or ANCESTOR's root is BASE's\n  // shadow-including inclusive ancestor, return ANCESTOR.\n  let refNodePath = pathComposer(refNode, true);\n  let p$ = path;\n  for (let i=0, ancestor, lastRoot, root, rootIdx; i < p$.length; i++) {\n    ancestor = p$[i];\n    root = ancestor === window ? window : ancestor.getRootNode();\n    if (root !== lastRoot) {\n      rootIdx = refNodePath.indexOf(root);\n      lastRoot = root;\n    }\n    if (!utils.isShadyRoot(root) || rootIdx > -1) {\n      return ancestor;\n    }\n  }\n}\n\nlet EventMixin = {\n\n  __patched: 'Event',\n\n  get composed() {\n    if (this.isTrusted && this.__composed === undefined) {\n      this.__composed = alwaysComposed[this.type];\n    }\n    return this.__composed || false;\n  },\n\n  composedPath() {\n    if (!this.__composedPath) {\n      this.__composedPath = pathComposer(this.__target, this.composed);\n    }\n    return this.__composedPath;\n  },\n\n  get target() {\n    return retarget(this.currentTarget, this.composedPath());\n  },\n\n  // http://w3c.github.io/webcomponents/spec/shadow/#event-relatedtarget-retargeting\n  get relatedTarget() {\n    if (!this.__relatedTarget) {\n      return null;\n    }\n    if (!this.__relatedTargetComposedPath) {\n      this.__relatedTargetComposedPath = pathComposer(this.__relatedTarget, true);\n    }\n    // find the deepest node in relatedTarget composed path that is in the same root with the currentTarget\n    return retarget(this.currentTarget, this.__relatedTargetComposedPath);\n  },\n  stopPropagation() {\n    Event.prototype.stopPropagation.call(this);\n    this.__propagationStopped = true;\n  },\n  stopImmediatePropagation() {\n    Event.prototype.stopImmediatePropagation.call(this);\n    this.__immediatePropagationStopped = true;\n    this.__propagationStopped = true;\n  }\n\n};\n\nfunction mixinComposedFlag(Base) {\n  // NOTE: avoiding use of `class` here so that transpiled output does not\n  // try to do `Base.call` with a dom construtor.\n  let klazz = function(type, options) {\n    let event = new Base(type, options);\n    event.__composed = options && Boolean(options.composed);\n    return event;\n  }\n  // put constructor properties on subclass\n  utils.mixin(klazz, Base);\n  klazz.prototype = Base.prototype;\n  return klazz;\n}\n\nlet nonBubblingEventsToRetarget = {\n  focus: true,\n  blur: true\n};\n\nfunction fireHandlers(event, node, phase) {\n  let hs = node.__handlers && node.__handlers[event.type] &&\n    node.__handlers[event.type][phase];\n  if (hs) {\n    for (let i = 0, fn; (fn = hs[i]); i++) {\n      fn.call(node, event);\n      if (event.__immediatePropagationStopped) {\n        return;\n      }\n    }\n  }\n}\n\nfunction retargetNonBubblingEvent(e) {\n  let path = e.composedPath();\n  let node;\n  // override `currentTarget` to let patched `target` calculate correctly\n  Object.defineProperty(e, 'currentTarget', {\n    get: function() {\n      return node;\n    },\n    configurable: true\n  });\n  for (let i = path.length - 1; i >= 0; i--) {\n    node = path[i];\n    // capture phase fires all capture handlers\n    fireHandlers(e, node, 'capture');\n    if (e.__propagationStopped) {\n      return;\n    }\n  }\n  Object.defineProperty(e, 'eventPhase', {value: Event.BUBBLING_PHASE});\n  for (let i = 0; i < path.length; i++) {\n    node = path[i];\n    // bubbling phase should only fire on original target and all shadowroot hosts\n    if (i > 0 && !node.shadowRoot) {\n      continue;\n    }\n    fireHandlers(e, node, 'bubble');\n    if (e.__propagationStopped) {\n      return;\n    }\n  }\n}\n\nfunction shouldCapture(optionsOrCapture) {\n  return Boolean(typeof optionsOrCapture === 'object' ?\n    optionsOrCapture.capture : optionsOrCapture);\n}\n\nexport function addEventListener(type, fn, optionsOrCapture) {\n  if (!fn) {\n    return;\n  }\n  // TODO: investigate if this is worth tracking, as it is only used for\n  // deciding if the `slotchanged` event should be fired\n  if (!this.__eventListenerCount) {\n    this.__eventListenerCount = 0;\n  }\n  this.__eventListenerCount++;\n  let wrappedFn = function(e) {\n    if (!e.__target) {\n      e.__target = e.target;\n      e.__relatedTarget = e.relatedTarget;\n      utils.patchPrototype(e, EventMixin);\n    }\n    // There are two critera that should stop events from firing on this node\n    // 1. the event is not composed and the current node is not in the same root as the target\n    // 2. when bubbling, if after retargeting, relatedTarget and target point to the same node\n    if (e.composed || e.composedPath().indexOf(this) > -1) {\n      if (e.eventPhase === Event.BUBBLING_PHASE) {\n        if (e.target === e.relatedTarget) {\n          e.stopImmediatePropagation();\n          return;\n        }\n      }\n      return fn(e);\n    }\n  };\n  fn.__eventWrapper = wrappedFn;\n  if (nonBubblingEventsToRetarget[type]) {\n    this.__handlers = this.__handlers || {};\n    this.__handlers[type] = this.__handlers[type] || {capture: [], bubble: []};\n    if (shouldCapture(optionsOrCapture)) {\n      this.__handlers[type].capture.push(wrappedFn);\n    } else {\n      this.__handlers[type].bubble.push(wrappedFn);\n    }\n  } else {\n    origAddEventListener.call(this, type, wrappedFn, optionsOrCapture);\n  }\n}\n\nexport function removeEventListener(type, fn, optionsOrCapture) {\n  if (!fn) {\n    return;\n  }\n  let wrapper = fn.__eventWrapper;\n  origRemoveEventListener.call(this, type, wrapper || fn, optionsOrCapture);\n  if (wrapper) {\n    fn.__eventWrapper = null;\n    this.__eventListenerCount--;\n    if (nonBubblingEventsToRetarget[type]) {\n      if (this.__handlers) {\n        if (this.__handlers[type]) {\n          let idx;\n          if (shouldCapture(optionsOrCapture)) {\n            idx = this.__handlers[type].capture.indexOf(wrapper);\n            if (idx > -1) {\n              this.__handlers[type].capture.splice(idx, 1);\n            }\n          } else {\n            idx = this.__handlers[type].bubble.indexOf(wrapper);\n            if (idx > -1) {\n              this.__handlers[type].bubble.splice(idx, 1);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function activateFocusEventOverrides() {\n  for (let ev in nonBubblingEventsToRetarget) {\n    window.addEventListener(ev, function(e) {\n      if (!e.__target) {\n        e.__target = e.target;\n        e.__relatedTarget = e.relatedTarget;\n        utils.patchPrototype(e, EventMixin);\n        retargetNonBubblingEvent(e);\n        e.stopImmediatePropagation();\n      }\n    }, true);\n  }\n}\n\nexport let OriginalEvent = Event;\nexport let PatchedEvent = mixinComposedFlag(Event);\nexport let PatchedCustomEvent = mixinComposedFlag(CustomEvent);\nexport let PatchedMouseEvent = mixinComposedFlag(MouseEvent);\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n'use strict';\n\nimport {tree} from './tree'\n\n// NOTE: normalize event contruction where necessary (IE11)\nlet NormalizedEvent = typeof Event === 'function' ? Event :\n  function(inType, params) {\n    params = params || {};\n    var e = document.createEvent('Event');\n    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));\n    return e;\n  };\n\nexport default class {\n\n  constructor(root) {\n    this.root = root;\n    this.insertionPointTag = 'slot';\n  }\n\n  getInsertionPoints() {\n    return this.root.querySelectorAll(this.insertionPointTag);\n  }\n\n  hasInsertionPoint() {\n    return Boolean(this.root._insertionPoints &&\n      this.root._insertionPoints.length);\n  }\n\n  isInsertionPoint(node) {\n    return node.localName && node.localName == this.insertionPointTag;\n  }\n\n  distribute() {\n    if (this.hasInsertionPoint()) {\n      return this.distributePool(this.root, this.collectPool());\n    }\n    return [];\n  }\n\n  // Gather the pool of nodes that should be distributed. We will combine\n  // these with the \"content root\" to arrive at the composed tree.\n  collectPool() {\n    return tree.arrayCopy(\n      tree.Logical.getChildNodes(this.root.host));\n  }\n\n  // perform \"logical\" distribution; note, no actual dom is moved here,\n  // instead elements are distributed into storage\n  // array where applicable.\n  distributePool(node, pool) {\n    let dirtyRoots = [];\n    let p$ = this.root._insertionPoints;\n    for (let i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n      this.distributeInsertionPoint(p, pool);\n      // provoke redistribution on insertion point parents\n      // must do this on all candidate hosts since distribution in this\n      // scope invalidates their distribution.\n      // only get logical parent.\n      let parent = tree.Logical.getParentNode(p);\n      if (parent && parent.shadyRoot &&\n          this.hasInsertionPoint(parent.shadyRoot)) {\n        dirtyRoots.push(parent.shadyRoot);\n      }\n    }\n    for (let i=0; i < pool.length; i++) {\n      let p = pool[i];\n      if (p) {\n        p._assignedSlot = undefined;\n        // remove undistributed elements from physical dom.\n        let parent = tree.Composed.getParentNode(p);\n        if (parent) {\n          tree.Composed.removeChild(parent, p);\n        }\n      }\n    }\n    return dirtyRoots;\n  }\n\n  distributeInsertionPoint(insertionPoint, pool) {\n    let prevAssignedNodes = insertionPoint._assignedNodes;\n    if (prevAssignedNodes) {\n      this.clearAssignedSlots(insertionPoint, true);\n    }\n    insertionPoint._assignedNodes = [];\n    let needsSlotChange = false;\n    // distribute nodes from the pool that this selector matches\n    let anyDistributed = false;\n    for (let i=0, l=pool.length, node; i < l; i++) {\n      node=pool[i];\n      // skip nodes that were already used\n      if (!node) {\n        continue;\n      }\n      // distribute this node if it matches\n      if (this.matchesInsertionPoint(node, insertionPoint)) {\n        if (node.__prevAssignedSlot != insertionPoint) {\n          needsSlotChange = true;\n        }\n        this.distributeNodeInto(node, insertionPoint)\n        // remove this node from the pool\n        pool[i] = undefined;\n        // since at least one node matched, we won't need fallback content\n        anyDistributed = true;\n      }\n    }\n    // Fallback content if nothing was distributed here\n    if (!anyDistributed) {\n      let children = tree.Logical.getChildNodes(insertionPoint);\n      for (let j = 0, node; j < children.length; j++) {\n        node = children[j];\n        if (node.__prevAssignedSlot != insertionPoint) {\n          needsSlotChange = true;\n        }\n        this.distributeNodeInto(node, insertionPoint);\n      }\n    }\n    // we're already dirty if a node was newly added to the slot\n    // and we're also dirty if the assigned count decreased.\n    if (prevAssignedNodes) {\n      // TODO(sorvell): the tracking of previously assigned slots\n      // could instead by done with a Set and then we could\n      // avoid needing to iterate here to clear the info.\n      for (let i=0; i < prevAssignedNodes.length; i++) {\n        prevAssignedNodes[i].__prevAssignedSlot = null;\n      }\n      if (insertionPoint._assignedNodes.length < prevAssignedNodes.length) {\n        needsSlotChange = true;\n      }\n    }\n    this.setDistributedNodesOnInsertionPoint(insertionPoint);\n    if (needsSlotChange) {\n      this._fireSlotChange(insertionPoint);\n    }\n  }\n\n  clearAssignedSlots(slot, savePrevious) {\n    let n$ = slot._assignedNodes;\n    if (n$) {\n      for (let i=0; i < n$.length; i++) {\n        let n = n$[i];\n        if (savePrevious) {\n          n.__prevAssignedSlot = n._assignedSlot;\n        }\n        // only clear if it was previously set to this slot;\n        // this helps ensure that if the node has otherwise been distributed\n        // ignore it.\n        if (n._assignedSlot === slot) {\n          n._assignedSlot = null;\n        }\n      }\n    }\n  }\n\n  matchesInsertionPoint(node, insertionPoint) {\n    let slotName = insertionPoint.getAttribute('name');\n    slotName = slotName ? slotName.trim() : '';\n    let slot = node.getAttribute && node.getAttribute('slot');\n    slot = slot ? slot.trim() : '';\n    return (slot == slotName);\n  }\n\n  distributeNodeInto(child, insertionPoint) {\n    insertionPoint._assignedNodes.push(child);\n    child._assignedSlot = insertionPoint;\n  }\n\n  setDistributedNodesOnInsertionPoint(insertionPoint) {\n    let n$ = insertionPoint._assignedNodes;\n    insertionPoint._distributedNodes = [];\n    for (let i=0, n; (i<n$.length) && (n=n$[i]) ; i++) {\n      if (this.isInsertionPoint(n)) {\n        let d$ = n._distributedNodes;\n        if (d$) {\n          for (let j=0; j < d$.length; j++) {\n            insertionPoint._distributedNodes.push(d$[j]);\n          }\n        }\n      } else {\n        insertionPoint._distributedNodes.push(n$[i]);\n      }\n    }\n  }\n\n  _fireSlotChange(insertionPoint) {\n    // NOTE: cannot bubble correctly here so not setting bubbles: true\n    // Safari tech preview does not bubble but chrome does\n    // Spec says it bubbles (https://dom.spec.whatwg.org/#mutation-observers)\n    insertionPoint.dispatchEvent(new NormalizedEvent('slotchange'));\n    if (insertionPoint._assignedSlot) {\n      this._fireSlotChange(insertionPoint._assignedSlot);\n    }\n  }\n\n  isFinalDestination(insertionPoint) {\n    return !(insertionPoint._assignedSlot);\n  }\n\n}","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Patches elements that interacts with ShadyDOM\n * such that tree traversal and mutation apis act like they would under\n * ShadowDOM.\n *\n * This import enables seemless interaction with ShadyDOM powered\n * custom elements, enabling better interoperation with 3rd party code,\n * libraries, and frameworks that use DOM tree manipulation apis.\n */\n\n'use strict';\nimport * as utils from './utils'\nimport {ShadyRoot, flush, enqueue} from './shady'\nimport * as patch from './patch'\nimport {getRootNode, filterMutations, observeChildren, unobserveChildren}\n  from './element-mixin'\nimport * as events from './event-mixin'\nimport {tree, getNativeProperty} from './tree'\n\nif (utils.settings.inUse) {\n\n  window.ShadyDOM = {\n    tree: tree,\n    getNativeProperty: getNativeProperty,\n    patch: patch.patchNode,\n    isPatched: patch.isNodePatched,\n    unpatch: patch.unpatchNode,\n    isShadyRoot: utils.isShadyRoot,\n    enqueue: enqueue,\n    flush: flush,\n    inUse: utils.settings.inUse,\n    filterMutations: filterMutations,\n    observeChildren: observeChildren,\n    unobserveChildren: unobserveChildren\n  };\n\n  let createRootAndEnsurePatched = function(node) {\n    // TODO(sorvell): need to ensure ancestors are patched but this introduces\n    // a timing problem with gathering composed children.\n    // (1) currently the child list is crawled and patched when patching occurs\n    // (this needs to change)\n    // (2) we can only patch when an element has received its parsed children\n    // because we cannot detect them when inserted by parser.\n    // let ancestor = node;\n    // while (ancestor) {\n    //   patchNode(ancestor);\n    //   ancestor = ancestor.parentNode || ancestor.host;\n    // }\n    patch.patchNode(node);\n    let root = new ShadyRoot(node);\n    patch.patchNode(root);\n    return root;\n  }\n\n  Element.prototype.attachShadow = function() {\n    return createRootAndEnsurePatched(this);\n  }\n\n  Node.prototype.addEventListener = events.addEventListener;\n  Node.prototype.removeEventListener = events.removeEventListener;\n  Event = events.PatchedEvent;\n  CustomEvent = events.PatchedCustomEvent;\n  MouseEvent = events.PatchedMouseEvent;\n  events.activateFocusEventOverrides();\n\n  Object.defineProperty(Node.prototype, 'isConnected', {\n    get() {\n      return document.documentElement.contains(this);\n    },\n    configurable: true\n  });\n\n  Node.prototype.getRootNode = function(options) {\n    return getRootNode(this, options);\n  }\n\n  Object.defineProperty(Element.prototype, 'slot', {\n    get() {\n      return this.getAttribute('slot');\n    },\n    set(value) {\n      this.setAttribute('slot', value);\n    },\n    configurable: true\n  });\n\n  Object.defineProperty(Node.prototype, 'assignedSlot', {\n    get() {\n      return this._assignedSlot || null;\n    },\n    configurable: true\n  });\n\n  // TODO(sorvell): super experimental auto patching of document fragment\n  // via appendChild. This either needs to be expanded or contracted.\n  // DocumentFragment.prototype.appendChild = function(node) {\n  //   patchNode(this);\n  //   return this.appendChild(node);\n  // }\n\n}\n"],"sourceRoot":"/source/"}